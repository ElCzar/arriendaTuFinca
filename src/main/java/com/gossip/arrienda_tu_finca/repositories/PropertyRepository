package com.gossip.arrienda_tu_finca.repositories;

import com.gossip.arrienda_tu_finca.dto.PropertyDTO;
import com.gossip.arrienda_tu_finca.entities.Property;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

public interface PropertyRepository extends JpaRepository<Property, Long> {

    // Encuentra todas las propiedades que pertenecen a un usuario específico (por su email)
    @Query("SELECT p FROM Property p WHERE p.owner.email = :email")
    List<Property> findAllByOwnerEmail(@Param("email") String ownerEmail);

    // Consulta personalizada para obtener una propiedad como DTO usando su ID
    @Query("SELECT new com.gossip.arrienda_tu_finca.dto.PropertyDTO(p.id, p.name, p.description, p.municipality, p.typeOfEntrance, p.address, p.isAvailable, p.pricePerNight, p.amountOfRooms, p.amountOfBathrooms, p.isPetFriendly, p.hasPool, p.hasGril, p.owner.email) FROM Property p WHERE p.id = :propertyId")
    PropertyDTO findPropertyDTOById(@Param("propertyId") Long propertyId);

    // Encuentra todas las propiedades disponibles (activas)
    @Query("SELECT p FROM Property p WHERE p.isAvailable = true")
    List<Property> findAllAvailableProperties();

    // Verifica si una propiedad existe por su ID y si está disponible
    @Query("SELECT COUNT(p) > 0 FROM Property p WHERE p.id = :propertyId AND p.isAvailable = true")
    boolean existsByIdAndIsAvailable(@Param("propertyId") Long propertyId);

    // Devuelve el precio por noche de una propiedad específica
    @Query("SELECT p.pricePerNight FROM Property p WHERE p.id = :propertyId")
    Double findPricePerNightById(@Param("propertyId") Long propertyId);

    // Modifica el estado de disponibilidad de una propiedad por su ID
    @Modifying
    @Query("UPDATE Property p SET p.isAvailable = false WHERE p.id = :propertyId")
    void deactivatePropertyById(@Param("propertyId") Long propertyId);
}
